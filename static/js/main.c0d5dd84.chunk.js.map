{"version":3,"sources":["components/Header.js","components/pages/Home.js","components/utils/API.js","components/Row.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","className","React","Component","Home","axios","get","Row","employees","search","filterEmployees","API","then","res","currentList","data","results","sorted","i","length","name","first","includes","toLowerCase","last","email","cell","push","sort","a","b","setState","handleInputChange","event","value","target","console","log","catch","err","this","onChange","type","placeholder","map","employee","src","picture","thumbnail","location","timezone","description","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qRAeeA,E,4MAZXC,MAAQ,G,uDAKJ,OACI,yBAAKC,UAAU,OAAf,0B,GAPSC,IAAMC,WCUVC,I,iBCRF,EACC,WACZ,OAAOC,IAAMC,IAAI,kDCHAC,E,4MACjBP,MAAQ,CACJQ,UAAW,GACXC,OAAQ,I,EASZC,gBAAkB,SAACD,GACfE,IACKC,MAAK,SAAAC,GAGF,IAFA,IAAIC,EAAcD,EAAIE,KAAKC,QACvBC,EAAS,GACJC,EAAI,EAAGA,EAAIJ,EAAYK,OAAQD,KAChCJ,EAAYI,GAAGE,KAAKC,MAAMC,SAAUb,EAAQc,gBAAkBT,EAAYI,GAAGE,KAAKI,KAAKF,SAAUb,EAAQc,gBAAkBT,EAAYI,GAAGO,MAAMH,SAAUb,EAAQc,gBAAkBT,EAAYI,GAAGQ,KAAKJ,SAAUb,EAAQc,iBAC1NN,EAAOU,KAAKb,EAAYI,IAGhCD,EAAOW,MACH,SAASC,EAAGC,GACR,OAAGD,EAAET,KAAKC,MAAQS,EAAEV,KAAKC,OAAiB,EACvCQ,EAAET,KAAKC,MAAQS,EAAEV,KAAKC,MAAgB,EAClC,KAGf,EAAKU,SAAS,CAAEvB,UAAWS,Q,EAIvCe,kBAAoB,SAAAC,GAAS,IAEjBC,EAAUD,EAAME,OAAhBD,MACRE,QAAQC,IAAIH,GAGZ,EAAKH,SAAS,CACVtB,OAAQyB,IAGZ,EAAKxB,gBAAgBwB,I,kEArCJ,IAAD,OAChBvB,IACKC,MAAK,SAAAC,GAAG,OAAI,EAAKkB,SAAS,CAAEvB,UAAWK,EAAIE,KAAKC,aAChDsB,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,Q,+BAsC9B,OAEI,6BACI,0BAAMtC,UAAU,YACZ,2BACIiC,MAAOM,KAAKxC,MAAMS,OAClBW,KAAK,SACLqB,SAAUD,KAAKR,kBACfU,KAAK,OACLC,YAAY,sBAGnBH,KAAKxC,MAAMQ,UAAUoC,KAAI,SAAAC,GAAQ,OAC9B,yBAAK5C,UAAU,WACX,yBAAKA,UAAU,YACX,yBAAK6C,IAAKD,EAASE,QAAQC,aAE/B,yBAAK/C,UAAU,YACX,2BAAI4C,EAASzB,KAAKC,MAAlB,IAA0BwB,EAASzB,KAAKI,KAAxC,MAEJ,yBAAKvB,UAAU,YACX,2BAAI4C,EAASpB,QAEjB,yBAAKxB,UAAU,YACX,2BAAI4C,EAASnB,OAEjB,yBAAKzB,UAAU,YACX,wCAAc4C,EAASI,SAASC,SAASC,uB,GA1EpChD,aCYlBiD,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOL,SAASM,UAEe,UAA7BD,OAAOL,SAASM,UAEhBD,OAAOL,SAASM,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.c0d5dd84.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n    state = {\n        \n    }\n\n    render() {\n        return (\n            <div className=\"m-2\">Employee Directory</div>\n        )\n    }\n\n}\n\nexport default Header;","import React, { Component } from 'react'\n\nfunction Home() {\n    return (\n      <div>\n        {/* <Filter/>\n        <Header />\n        <Row /> */}\n      </div>\n    );\n  }\n  \n  export default Home;","import axios from \"axios\";\n\n// Export an object containing methods we'll use for accessing the Dog.Ceo API\n\nexport default {\n  getEmployees: function() {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n\n}\n}\n","import React, { Component } from 'react'\nimport API from './utils/API'\n\nexport default class Row extends Component {\n    state = {\n        employees: [],\n        search: \"\"\n    }\n\n    componentDidMount() {\n        API.getEmployees()\n            .then(res => this.setState({ employees: res.data.results }))\n            .catch(err => console.log(err))\n    }\n\n    filterEmployees = (search) => {\n        API.getEmployees()\n            .then(res => {\n                var currentList = res.data.results;\n                var sorted = [];\n                for (let i = 0; i < currentList.length; i++) {\n                    if (currentList[i].name.first.includes((search).toLowerCase()) || currentList[i].name.last.includes((search).toLowerCase()) || currentList[i].email.includes((search).toLowerCase()) || currentList[i].cell.includes((search).toLowerCase())) {\n                        sorted.push(currentList[i])\n                    }\n                }\n                sorted.sort(\n                    function(a, b){\n                        if(a.name.first < b.name.first) { return -1; }\n                        if(a.name.first > b.name.first) { return 1; }\n                        return 0;\n                    }\n                );\n                this.setState({ employees: sorted })\n            })\n    }\n\n    handleInputChange = event => {\n        // Getting the value and name of the input which triggered the change\n        const { value } = event.target;\n        console.log(value)\n\n        // Updating the input's state\n        this.setState({\n            search: value\n        })\n        // console.log(this.state.search)\n        this.filterEmployees(value)\n    };\n\n    render() {\n        return (\n\n            <div>\n                <form className=\"form m-2\">\n                    <input\n                        value={this.state.search}\n                        name=\"search\"\n                        onChange={this.handleInputChange}\n                        type=\"text\"\n                        placeholder=\"Search Directory\"\n                    />\n                </form>\n                {this.state.employees.map(employee => (\n                    <div className=\"row m-2\">\n                        <div className=\"col-md-1\">\n                            <img src={employee.picture.thumbnail} />\n                        </div>\n                        <div className=\"col-md-2\">\n                            <p>{employee.name.first} {employee.name.last} </p>\n                        </div>\n                        <div className=\"col-md-3\">\n                            <p>{employee.email}</p>\n                        </div>\n                        <div className=\"col-md-2\">\n                            <p>{employee.cell}</p>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <p>Timezone: {employee.location.timezone.description}</p>\n                        </div>\n                    </div>\n                ))}\n\n            </div>\n\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Home from './components/pages/Home';\nimport Row from './components/Row';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Row />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}